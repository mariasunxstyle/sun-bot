
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, executor
import os
from steps import steps

API_TOKEN = os.getenv("TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

user_state = {}
tasks = {}

def format_duration(dur):
    minutes = int(dur)
    hours = minutes // 60
    mins = minutes % 60
    if dur != int(dur):
        return f"{dur} –º–∏–Ω"
    elif hours:
        return f"{hours}—á {mins}–º" if mins else f"{hours}—á"
    else:
        return f"{mins} –º–∏–Ω"

def step_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    for step in steps:
        total = sum(p['duration_min'] for p in step['positions'])
        label = f"–®–∞–≥ {step['step']} ({format_duration(total)})"
        keyboard.insert(types.KeyboardButton(label))
    keyboard.add(types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ"))
    return keyboard

def control_keyboard():
    return types.ReplyKeyboardMarkup(resize_keyboard=True).add(
        types.KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
    ).add(
        types.KeyboardButton("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å")
    ).add(
        types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞")
    ).add(
        types.KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º")
    )

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    welcome = (
        "–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—Ü–µ! ‚òÄÔ∏è\n"
        "–¢—ã –≤ —Ç–∞–π–º–µ—Ä–µ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.\n"
        "–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Å–æ–ª–Ω—Ü—É –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ ‚Äî –∏ –∑–∞–≥–∞—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–æ–≤–Ω—ã–º, –≥–ª—É–±–æ–∫–∏–º –∏ –±–µ–∑ –æ–∂–æ–≥–æ–≤.\n"
        "–¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∏ —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –≤—ã—Ä–∞–±–æ—Ç–∫—É –≤–∏—Ç–∞–º–∏–Ω–∞ D,\n"
        "—Ä–µ–≥—É–ª—è—Ü–∏—é –≥–æ—Ä–º–æ–Ω–æ–≤ –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.\n\n"
        "–ù–∞—á–∏–Ω–∞–π —Å —à–∞–≥–∞ 1. –î–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ—Ä–µ–ª(–∞), –≤–∞–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—É—Ç—å —Å –Ω–∞—á–∞–ª–∞.\n"
        "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥.\n"
        "–•–æ—á–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî –∂–º–∏ ‚ÑπÔ∏è –ò–Ω—Ñ–æ. –¢–∞–º –≤—Å—ë –ø–æ –¥–µ–ª—É."
    )
    await message.answer(welcome, reply_markup=step_keyboard())

@dp.message_handler(lambda m: m.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def info(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è –ú–µ—Ç–æ–¥ —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π, –ø–æ—à–∞–≥–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∑–∞–≥–∞—Ä—É.\n"
        "–û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–∂–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ —Å–æ–ª–Ω—Ü—É, —Å–Ω–∏–∂–∞—è —Ä–∏—Å–∫ –æ–∂–æ–≥–æ–≤ –∏ –ø—è—Ç–µ–Ω.\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–≥–æ—Ä–∞—Ç—å —Å 7:00 –¥–æ 11:00 –∏ –ø–æ—Å–ª–µ 17:00 ‚Äî –≤ —ç—Ç–æ –≤—Ä–µ–º—è —Å–æ–ª–Ω—Ü–µ –º—è–≥–∫–æ–µ,\n"
        "–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π –º–æ–∂–Ω–æ –∑–∞–≥–æ—Ä–∞—Ç—å –±–µ–∑ SPF.\n"
        "–¢–∞–∫ –∫–æ–∂–∞ –≤–∫–ª—é—á–∞–µ—Ç —Å–≤–æ—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞—â–∏—Ç—É: –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–µ–ª–∞–Ω–∏–Ω –∏ –≥–æ—Ä–º–æ–Ω—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.\n\n"
        "–° 11:00 –¥–æ 17:00 ‚Äî —Å–æ–ª–Ω—Ü–µ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ. –ï—Å–ª–∏ –æ—Å—Ç–∞—ë—à—å—Å—è –Ω–∞ —É–ª–∏—Ü–µ ‚Äî\n"
        "–Ω–∞–¥–µ–≤–∞–π –æ–¥–µ–∂–¥—É, –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π SPF.\n\n"
        "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥.\n"
        "–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∫–æ–∂–∞ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–ª–∞—Å—å –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É—Å–∏–ª–∏–≤–∞–ª–∞ –∑–∞—â–∏—Ç—É.\n\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏: @sunxbeach_director"
    )

async def run_step(chat_id, uid):
    state = user_state[uid]
    step = next((s for s in steps if s["step"] == state["step"]), None)
    if not step:
        return
    if state["pos"] >= len(step["positions"]):
        await bot.send_message(chat_id, "–®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ", reply_markup=control_keyboard())
        return
    pos = step["positions"][state["pos"]]
    await bot.send_message(chat_id, f"{pos['name']} ‚Äî {format_duration(pos['duration_min'])}", reply_markup=control_keyboard())
    await asyncio.sleep(int(pos["duration_min"] * 60))
    state["pos"] += 1
    await run_step(chat_id, uid)

@dp.message_handler(lambda m: m.text.startswith("–®–∞–≥"))
async def handle_step(message: types.Message):
    uid = message.from_user.id
    try:
        step_num = int(message.text.split(" ")[1])
        user_state[uid] = {"step": step_num, "pos": 0}
        if uid in tasks and not tasks[uid].done():
            tasks[uid].cancel()
        tasks[uid] = asyncio.create_task(run_step(message.chat.id, uid))
    except Exception:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–≥")

@dp.message_handler(lambda m: m.text in ["‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å", "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞", "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"])
async def control(message: types.Message):
    uid = message.from_user.id
    if uid not in user_state:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —à–∞–≥.")
        return
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        current = user_state[uid]['step']
        next_step = current + 1
        if next_step > 12:
            await message.answer("–í—Å–µ —à–∞–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!", reply_markup=step_keyboard())
            return
        user_state[uid] = {"step": next_step, "pos": 0}
        await message.answer(f"–®–∞–≥ {next_step}")
        if uid in tasks and not tasks[uid].done():
            tasks[uid].cancel()
        tasks[uid] = asyncio.create_task(run_step(message.chat.id, uid))
    elif message.text == "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å":
        await message.answer("–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚òÄÔ∏è", reply_markup=step_keyboard())
        user_state.pop(uid, None)
        if uid in tasks:
            tasks[uid].cancel()
    elif message.text == "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º":
        await message.answer("–í—ã–±–µ—Ä–∏ —à–∞–≥:", reply_markup=step_keyboard())
    elif message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞":
        current = user_state[uid]['step']
        new_step = max(1, current - 2)
        user_state[uid] = {'step': new_step, 'pos': 0}
        await message.answer(f"–®–∞–≥ {new_step}")
        if uid in tasks and not tasks[uid].done():
            tasks[uid].cancel()
        tasks[uid] = asyncio.create_task(run_step(message.chat.id, uid))

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
