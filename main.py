import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import os
from steps import steps
import asyncio

API_TOKEN = os.getenv("TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

user_state = {}  # {user_id: {"step": 1, "pos": 0, "message_id": int}}

WELCOME_TEXT = """–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—Ü–µ! ‚òÄÔ∏è
–¢—ã –≤ —Ç–∞–π–º–µ—Ä–µ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.
–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Å–æ–ª–Ω—Ü—É –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ ‚Äî –∏ –∑–∞–≥–∞—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–æ–≤–Ω—ã–º, –≥–ª—É–±–æ–∫–∏–º –∏ –±–µ–∑ –æ–∂–æ–≥–æ–≤.

–ù–∞—á–∏–Ω–∞–π —Å —à–∞–≥–∞ 1. –î–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ—Ä–µ–ª(–∞), –≤–∞–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—É—Ç—å —Å –Ω–∞—á–∞–ª–∞.
–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥.

–•–æ—á–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî –∂–º–∏ ‚ÑπÔ∏è –ò–Ω—Ñ–æ. –¢–∞–º –≤—Å—ë –ø–æ –¥–µ–ª—É."""

INFO_TEXT = """‚ÑπÔ∏è –ò–Ω—Ñ–æ
–ú–µ—Ç–æ–¥ —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚Äî —ç—Ç–æ –ø–æ—à–∞–≥–æ–≤–∞—è —Å—Ö–µ–º–∞ –∑–∞–≥–∞—Ä–∞.
–¢—ã –≤—ã–±–∏—Ä–∞–µ—à—å —à–∞–≥ ‚Äî –∏ –∑–∞–≥–æ—Ä–∞–µ—à—å —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–∞–π–º–∏–Ω–≥—É.

–ù–∞—á–∏–Ω–∞—Ç—å –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ —Å —à–∞–≥–∞ 1, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç—ã —É–∂–µ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ—Ä–µ–ª(–∞).
–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏–ª–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥.

–¢–∞–∫ –∫–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Å–æ–ª–Ω—Ü—É ‚Äî –∏ —Ç—ã –∑–∞–≥–æ—Ä–∞–µ—à—å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ, –±–µ–∑ –æ–∂–æ–≥–æ–≤.
–≠—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –ø—è—Ç–µ–Ω, –ø–µ—Ä–µ–≥—Ä–µ–≤–∞ –∏ –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–ª—É –≤–∫–ª—é—á–∞—Ç—å –∑–∞—â–∏—Ç—É:
–º–µ–ª–∞–Ω–∏–Ω, –≥–æ—Ä–º–æ–Ω—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∏ –∏–º–º—É–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.

üå§Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–≥–æ—Ä–∞—Ç—å:
—Å 7:00 –¥–æ 11:00 –∏ –ø–æ—Å–ª–µ 17:00 ‚Äî –≤ —ç—Ç–æ –≤—Ä–µ–º—è —Å–æ–ª–Ω—Ü–µ –º—è–≥–∫–æ–µ,
–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π –º–æ–∂–Ω–æ –∑–∞–≥–æ—Ä–∞—Ç—å –±–µ–∑ SPF.

‚òÄÔ∏è –° 11:00 –¥–æ 17:00 ‚Äî —Å–æ–ª–Ω—Ü–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–µ–µ.
–ï—Å–ª–∏ –æ—Å—Ç–∞—ë—à—å—Å—è –Ω–∞ —É–ª–∏—Ü–µ ‚Äî –Ω–∞–¥–µ–≤–∞–π –æ–¥–µ–∂–¥—É, –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π SPF.

–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏: @sunxbeach_director"""

def step_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i in range(0, 12, 4):
        row = []
        for j in range(4):
            idx = i + j
            if idx < len(steps):
                s = steps[idx]
                total = sum(p['duration_min'] for p in s['positions'])
                h = int(total) // 60
                m = int(total) % 60
                label = f"{h}—á {m}–º" if h else f"{m}–º"
                row.append(types.KeyboardButton(f"–®–∞–≥ {s['step']} ({label})"))
        kb.row(*row)
    kb.add(types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ"))
    return kb

def control_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    kb.add("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å")
    kb.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞")
    kb.add("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º")
    return kb


    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip"))
    kb.add(InlineKeyboardButton("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="stop"))
    kb.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞", callback_data="back2"))
    kb.add(InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º", callback_data="back_to_menu"))
    return kb

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(WELCOME_TEXT, reply_markup=step_keyboard())

@dp.message_handler(lambda msg: msg.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def info(message: types.Message):
    await message.answer(INFO_TEXT)

@dp.message_handler(lambda msg: msg.text.startswith("–®–∞–≥ "))
@dp.message_handler(lambda msg: msg.text in ["‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å", "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞", "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"])
async def start_step(message: types.Message):
    try:
        step_num = int(message.text.split()[1])
        step_data = next(s for s in steps if s["step"] == step_num)
        user_state[message.from_user.id] = {"step": step_num, "pos": 0}
        await start_position_loop(message.chat.id, message.from_user.id)
    except:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —à–∞–≥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

async def start_position_loop(chat_id, user_id):
    state = user_state[user_id]
    step = next(s for s in steps if s["step"] == state["step"])
    if state["pos"] == 0:
        
        await asyncio.sleep(int(pos["duration_min"] * 60))
        if user_state.get(user_id) is None:
            return
        state["pos"] += 1
    await bot.send_message(chat_id, "–®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ", reply_markup=step_keyboard())
    user_state.pop(user_id, None)

@dp.callback_query_handler(lambda c: c.data)
async def handle_controls(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    data = callback.data
    state = user_state.get(user_id)

    if data == "skip" and state:
        state["pos"] += 1
        await start_position_loop(chat_id, user_id)
    elif data == "stop":
        user_state.pop(user_id, None)
        await bot.send_message(chat_id, "–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚òÄÔ∏è", reply_markup=exit_keyboard())
    elif data == "back2":
        if state:
            new_step = max(1, state["step"] - 2)
            user_state[user_id] = {"step": new_step, "pos": 0}
            await start_position_loop(chat_id, user_id)
    elif data == "back_to_menu":
        await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ —à–∞–≥ üëá", reply_markup=step_keyboard())
    await callback.answer()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
