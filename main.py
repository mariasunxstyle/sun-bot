
import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from steps import steps
import json
from datetime import datetime

API_TOKEN = os.getenv("TOKEN")
ADMIN_ID = 496676878
CHANNEL_USERNAME = "sunxstyle"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—Ü–µ! ‚òÄÔ∏è\n"
    "–¢—ã –≤ —Ç–∞–π–º–µ—Ä–µ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.\n"
    "–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Å–æ–ª–Ω—Ü—É –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ ‚Äî –∏ –∑–∞–≥–∞—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–æ–≤–Ω—ã–º, –≥–ª—É–±–æ–∫–∏–º –∏ –±–µ–∑ –æ–∂–æ–≥–æ–≤.\n"
    "–¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∏ —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –≤—ã—Ä–∞–±–æ—Ç–∫—É –≤–∏—Ç–∞–º–∏–Ω–∞ D,\n"
    "—Ä–µ–≥—É–ª—è—Ü–∏—é –≥–æ—Ä–º–æ–Ω–æ–≤ –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.\n\n"
    "–ù–∞—á–∏–Ω–∞–π —Å —à–∞–≥–∞ 1. –î–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ—Ä–µ–ª(–∞), –≤–∞–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—É—Ç—å —Å –Ω–∞—á–∞–ª–∞.\n"
    "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥.\n\n"
    "–•–æ—á–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî –∂–º–∏ ‚ÑπÔ∏è –ò–Ω—Ñ–æ."
)

INFO_TEXT = (
    "‚ÑπÔ∏è –ò–Ω—Ñ–æ\n"
    "–ú–µ—Ç–æ–¥ —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π, –ø–æ—à–∞–≥–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∑–∞–≥–∞—Ä—É.\n"
    "–û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–∂–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ —Å–æ–ª–Ω—Ü—É, —Å–Ω–∏–∂–∞—è —Ä–∏—Å–∫ –æ–∂–æ–≥–æ–≤ –∏ –ø—è—Ç–µ–Ω.\n\n"
    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–≥–æ—Ä–∞—Ç—å —Å 7:00 –¥–æ 11:00 –∏ –ø–æ—Å–ª–µ 17:00 ‚Äî –≤ —ç—Ç–æ –≤—Ä–µ–º—è —Å–æ–ª–Ω—Ü–µ –º—è–≥–∫–æ–µ,\n"
    "–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π –º–æ–∂–Ω–æ –∑–∞–≥–æ—Ä–∞—Ç—å –±–µ–∑ SPF.\n"
    "–¢–∞–∫ –∫–æ–∂–∞ –≤–∫–ª—é—á–∞–µ—Ç —Å–≤–æ—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞—â–∏—Ç—É: –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–µ–ª–∞–Ω–∏–Ω –∏ –≥–æ—Ä–º–æ–Ω—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.\n\n"
    "–° 11:00 –¥–æ 17:00 ‚Äî —Å–æ–ª–Ω—Ü–µ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ. –ï—Å–ª–∏ –æ—Å—Ç–∞—ë—à—å—Å—è –Ω–∞ —É–ª–∏—Ü–µ ‚Äî –Ω–∞–¥–µ–≤–∞–π –æ–¥–µ–∂–¥—É, –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π SPF.\n\n"
    "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥.\n"
    "–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∫–æ–∂–∞ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–ª–∞—Å—å –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É—Å–∏–ª–∏–≤–∞–ª–∞ –∑–∞—â–∏—Ç—É.\n\n"
    "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏: @sunxbeach_director"
)

user_state = {}
tasks = {}

def format_time(mins):
    h = int(mins // 60)
    m = int(mins % 60)
    return f"{h}—á {m}–º" if h else f"{m}–º"

def step_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    for step in steps:
        total = sum(p['duration_min'] for p in step["positions"])
        label = f"–®–∞–≥ {step['step']} ({format_time(total)})"
        markup.insert(types.KeyboardButton(label))
    markup.add("‚ÑπÔ∏è –ò–Ω—Ñ–æ")
    return markup

def control_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    markup.add("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å")
    markup.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞")
    markup.add("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º")
    return markup

def finish_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å")
    markup.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞", "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º")
    return markup

async def is_subscribed(user_id):
    try:
        member = await bot.get_chat_member(f"@{CHANNEL_USERNAME}", user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

def save_user(uid, name, lang, subscribed):
    entry = {
        "id": uid,
        "name": name,
        "lang": lang,
        "subscribed": subscribed,
        "time": datetime.utcnow().isoformat()
    }
    try:
        with open("users.json", "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []
    data.append(entry)
    with open("users.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

async def run_step(chat_id, uid):
    state = user_state[uid]
    step = steps[state["step"] - 1]
    pos_idx = state["pos"]

    if pos_idx >= len(step["positions"]):
        await bot.send_message(chat_id, f"–®–∞–≥ {state['step']} –∑–∞–≤–µ—Ä—à—ë–Ω!", reply_markup=finish_keyboard())
        return

    pos = step["positions"][pos_idx]
    await bot.send_message(chat_id, f"{pos['name']} ‚Äî {format_time(pos['duration_min'])}", reply_markup=control_keyboard())
    await asyncio.sleep(round(pos['duration_min'] * 60))
    state["pos"] += 1
    tasks[uid] = asyncio.create_task(run_step(chat_id, uid))

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    uid = message.from_user.id
    subscribed = await is_subscribed(uid)
    save_user(uid, message.from_user.full_name, message.from_user.language_code, subscribed)
    if not subscribed:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑")
        return await message.answer(
            "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ @sunxstyle.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å ‚Äî –∏ –Ω–∞–∂–º–∏ ¬´üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑¬ª", reply_markup=kb)
    await message.answer(WELCOME_TEXT, reply_markup=step_keyboard())

@dp.message_handler(lambda m: m.text == "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑")
async def check_again(message: types.Message):
    uid = message.from_user.id
    if await is_subscribed(uid):
        await message.answer("–ì–æ—Ç–æ–≤–æ! ‚òÄÔ∏è", reply_markup=step_keyboard())
    else:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑")
        await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ @sunxstyle.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å ‚Äî –∏ –Ω–∞–∂–º–∏ ¬´üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑¬ª", reply_markup=kb)

@dp.message_handler(commands=["admin"])
async def admin_report(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        with open("users.json", "r", encoding="utf-8") as f:
            data = json.load(f)
        total = len(data)
        subs = sum(1 for x in data if x["subscribed"])
        nsubs = total - subs
        await message.answer(f"üìä –û—Ç—á—ë—Ç Sunxstyle:\n‚Äî –í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: {total}\n‚Äî –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å: {subs}\n‚Äî –ù–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å: {nsubs}")
    except:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")

@dp.message_handler()
async def handle_step(message: types.Message):
    uid = message.from_user.id

    if message.text.startswith("–®–∞–≥"):
        step_num = int(message.text.split()[1])
        user_state[uid] = {"step": step_num, "pos": 0}
        
        tasks[uid] = asyncio.create_task(run_step(message.chat.id, uid))
            return

    elif message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞":
        current = user_state.get(uid, {"step": 3})["step"]
        step_num = max(1, current - 2)
        user_state[uid] = {"step": step_num, "pos": 0}
        
        tasks[uid] = asyncio.create_task(run_step(message.chat.id, uid))
            return

    elif message.text == "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º":
        await message.answer(reply_markup=step_keyboard())

    elif message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        if uid in user_state:
            user_state[uid]["pos"] += 1
            tasks[uid] = asyncio.create_task(run_step(message.chat.id, uid))
            return

    elif message.text == "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å":
        await message.answer("–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚òÄÔ∏è", reply_markup=control_keyboard())

    elif message.text == "‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        user_state[uid]["step"] += 1
        user_state[uid]["pos"] = 0
        await message.answer(f"–®–∞–≥ {user_state[uid]['step']}")
        tasks[uid] = asyncio.create_task(run_step(message.chat.id, uid))
            return

    elif message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ":
        await message.answer(INFO_TEXT)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
