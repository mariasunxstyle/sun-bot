
import logging
import asyncio
import re
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from steps import steps

API_TOKEN = "TOKEN"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_state = {}

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—Ü–µ! ‚òÄÔ∏è\n"
    "–¢—ã –≤ —Ç–∞–π–º–µ—Ä–µ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.\n"
    "–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Å–æ–ª–Ω—Ü—É –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ ‚Äî –∏ –∑–∞–≥–∞—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–æ–≤–Ω—ã–º, –≥–ª—É–±–æ–∫–∏–º –∏ –±–µ–∑ –æ–∂–æ–≥–æ–≤.\n"
    "–¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∏ —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –≤—ã—Ä–∞–±–æ—Ç–∫—É –≤–∏—Ç–∞–º–∏–Ω–∞ D,\n"
    "—Ä–µ–≥—É–ª—è—Ü–∏—é –≥–æ—Ä–º–æ–Ω–æ–≤ –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.\n\n"
    "–ù–∞—á–∏–Ω–∞–π —Å —à–∞–≥–∞ 1. –î–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ—Ä–µ–ª(–∞), –≤–∞–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—É—Ç—å —Å –Ω–∞—á–∞–ª–∞.\n"
    "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥.\n\n"
    "–•–æ—á–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî –∂–º–∏ ‚ÑπÔ∏è –ò–Ω—Ñ–æ. –¢–∞–º –≤—Å—ë –ø–æ –¥–µ–ª—É."
)

INFO_TEXT = (
    "‚ÑπÔ∏è –ò–Ω—Ñ–æ\n"
    "–ú–µ—Ç–æ–¥ —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π, –ø–æ—à–∞–≥–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∑–∞–≥–∞—Ä—É.\n"
    "–û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–∂–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ —Å–æ–ª–Ω—Ü—É, —Å–Ω–∏–∂–∞—è —Ä–∏—Å–∫ –æ–∂–æ–≥–æ–≤ –∏ –ø—è—Ç–µ–Ω.\n\n"
    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–≥–æ—Ä–∞—Ç—å —Å 7:00 –¥–æ 11:00 –∏ –ø–æ—Å–ª–µ 17:00 ‚Äî –≤ —ç—Ç–æ –≤—Ä–µ–º—è —Å–æ–ª–Ω—Ü–µ –º—è–≥–∫–æ–µ,\n"
    "–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π –º–æ–∂–Ω–æ –∑–∞–≥–æ—Ä–∞—Ç—å –±–µ–∑ SPF.\n"
    "–¢–∞–∫ –∫–æ–∂–∞ –≤–∫–ª—é—á–∞–µ—Ç —Å–≤–æ—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞—â–∏—Ç—É: –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–µ–ª–∞–Ω–∏–Ω –∏ –≥–æ—Ä–º–æ–Ω—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.\n\n"
    "–° 11:00 –¥–æ 17:00 ‚Äî —Å–æ–ª–Ω—Ü–µ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ. –ï—Å–ª–∏ –æ—Å—Ç–∞—ë—à—å—Å—è –Ω–∞ —É–ª–∏—Ü–µ ‚Äî\n"
    "–Ω–∞–¥–µ–≤–∞–π –æ–¥–µ–∂–¥—É, –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π SPF.\n\n"
    "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥.\n"
    "–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∫–æ–∂–∞ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–ª–∞—Å—å –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É—Å–∏–ª–∏–≤–∞–ª–∞ –∑–∞—â–∏—Ç—É.\n\n"
    "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏: @sunxbeach_director"
)

def step_keyboard():
    buttons = []
    for s in steps:
        h = int(sum(p['duration_min'] for p in s['positions']) // 60)
        m = int(sum(p['duration_min'] for p in s['positions']) % 60)
        label = f"–®–∞–≥ {s['step']} ("
        label += f"{h}—á " if h else ""
        label += f"{m}–º)"
        buttons.append(types.KeyboardButton(label))
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    keyboard.add(*buttons)
    keyboard.add(types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ"))
    return keyboard

def control_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    kb.add("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å")
    kb.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞")
    kb.add("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º")
    return kb

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(WELCOME_TEXT, reply_markup=step_keyboard())

@dp.message_handler(lambda msg: "–®–∞–≥" in msg.text and "(" in msg.text)
async def select_step(message: types.Message):
    try:
        match = re.search(r"–®–∞–≥ (\d+)", message.text)
        if not match:
            await message.answer("‚ö†Ô∏è –ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —à–∞–≥.")
            return
        step_num = int(match.group(1))
        step_data = next((s for s in steps if s["step"] == step_num), None)
        if not step_data:
            await message.answer(f"‚ö†Ô∏è –®–∞–≥ {step_num} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        user_state[message.from_user.id] = {"step": step_num, "pos": 0}
        await run_step(message.chat.id, message.from_user.id)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —à–∞–≥–∞: {str(e)}")

@dp.message_handler(lambda msg: msg.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def info(message: types.Message):
    await message.answer(INFO_TEXT)

@dp.message_handler(lambda msg: msg.text in ["‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞", "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å", "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"])
async def handle_controls(message: types.Message):
    uid = message.from_user.id
    if uid not in user_state:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —à–∞–≥.")
        return

    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞":
        current = user_state[uid]["step"]
        new_step = max(1, current - 2)
        user_state[uid] = {"step": new_step, "pos": 0}
        await run_step(message.chat.id, uid)
    elif message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_state[uid]["pos"] += 1
        await run_step(message.chat.id, uid)
    elif message.text == "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º":
        await message.answer("–í—ã–±–µ—Ä–∏ —à–∞–≥:", reply_markup=step_keyboard())
    elif message.text == "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å":
        del user_state[uid]
        await message.answer("–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ ‚òÄÔ∏è", reply_markup=step_keyboard())

async def run_step(chat_id, uid):
    state = user_state[uid]
    step = next(s for s in steps if s["step"] == state["step"])
    if state["pos"] >= len(step["positions"]):
        await bot.send_message(chat_id, "–®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º", "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞", "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å"))
        return
    pos = step["positions"][state["pos"]]
    await bot.send_message(chat_id, f"{pos['name']} ‚Äî {pos['duration_min']} –º–∏–Ω", reply_markup=control_keyboard())
    await asyncio.sleep(pos['duration_min'] * 60)
    user_state[uid]["pos"] += 1
    await run_step(chat_id, uid)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
